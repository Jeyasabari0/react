{"ast":null,"code":"var _jsxFileName = \"/home/decoders/Desktop/react/my-app/src/components/BasicTable.js\",\n  _s = $RefreshSig$();\nimport React, { useMemo } from 'react';\nimport { useTable } from 'react-table';\nimport MOCK_DATA from './MOCK_DATA.json';\nimport { COLOUMNS } from './Coloumns';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const BasicTable = () => {\n  _s();\n  const coloumns = useMemo(() => COLOUMNS, []);\n  const data = useMemo(() => MOCK_DATA, []);\n  const tableInstance = useTable({\n    coloumns,\n    data\n  });\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRows\n  } = tableInstance;\n  return /*#__PURE__*/_jsxDEV(\"table\", {\n    ...getTableProps(),\n    children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n      children: headerGroups.map(headerGroup => /*#__PURE__*/_jsxDEV(\"tr\", {\n        ...headerGroup.getHeaderGroupProps(),\n        children: headerGroup.headers.map(coloumn => /*#__PURE__*/_jsxDEV(\"th\", {\n          ...coloumn.getHeaderProps(),\n          children: coloumn.render('Header')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 21\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 6\n    }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n      ...getTableBodyProps(),\n      children: rows.map(row => {\n        prepareRows(row);\n        return /*#__PURE__*/_jsxDEV(\"tr\", {\n          ...row.getRowProps(),\n          children: row.cells.map(cell => {\n            return /*#__PURE__*/_jsxDEV(\"td\", {\n              ...cell.getCellProps(),\n              children: cell.render('Cell')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 41,\n              columnNumber: 25\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 6\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 4\n  }, this);\n};\n_s(BasicTable, \"a0Bv5CVuEWNjtYgfUuPReYRmjac=\", false, function () {\n  return [useTable];\n});\n_c = BasicTable;\nexport default BasicTable;\nvar _c;\n$RefreshReg$(_c, \"BasicTable\");","map":{"version":3,"names":["React","useMemo","useTable","MOCK_DATA","COLOUMNS","jsxDEV","_jsxDEV","BasicTable","_s","coloumns","data","tableInstance","getTableProps","getTableBodyProps","headerGroups","rows","prepareRows","children","map","headerGroup","getHeaderGroupProps","headers","coloumn","getHeaderProps","render","fileName","_jsxFileName","lineNumber","columnNumber","row","getRowProps","cells","cell","getCellProps","_c","$RefreshReg$"],"sources":["/home/decoders/Desktop/react/my-app/src/components/BasicTable.js"],"sourcesContent":["import React,{useMemo} from 'react'\nimport { useTable } from 'react-table'\nimport MOCK_DATA from './MOCK_DATA.json'\nimport { COLOUMNS } from './Coloumns'\n\nexport const BasicTable=()=> {\n\n    const coloumns=useMemo(()=>COLOUMNS,[])\n    const data=useMemo(()=>MOCK_DATA,[])\n\n   const tableInstance = useTable({\n        coloumns,\n        data,\n    })\n\n    const{\n        getTableProps,\n        getTableBodyProps,\n        headerGroups,\n        rows,\n        prepareRows,\n    }=tableInstance\n\n  return (\n   <table{...getTableProps()}>\n     <thead>\n         {headerGroups.map((headerGroup)=>(\n            <tr {...headerGroup.getHeaderGroupProps()}>\n                {headerGroup.headers.map((coloumn)=>(\n                    <th {...coloumn.getHeaderProps()}>{coloumn.render('Header')}</th> \n                ))}\n           </tr>\n         ))}\n     </thead>\n     <tbody{...getTableBodyProps()}>\n     {rows.map((row)=>{\n        prepareRows(row)\n        return(\n            <tr {...row.getRowProps()}>\n            {row.cells.map((cell)=>{\n                return  <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n            })}\n         </tr>\n        )})}\n         \n     </tbody>\n   </table>\n  )\n}\n\nexport default BasicTable\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAEC,OAAO,QAAO,OAAO;AACnC,SAASC,QAAQ,QAAQ,aAAa;AACtC,OAAOC,SAAS,MAAM,kBAAkB;AACxC,SAASC,QAAQ,QAAQ,YAAY;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAErC,OAAO,MAAMC,UAAU,GAACA,CAAA,KAAK;EAAAC,EAAA;EAEzB,MAAMC,QAAQ,GAACR,OAAO,CAAC,MAAIG,QAAQ,EAAC,EAAE,CAAC;EACvC,MAAMM,IAAI,GAACT,OAAO,CAAC,MAAIE,SAAS,EAAC,EAAE,CAAC;EAErC,MAAMQ,aAAa,GAAGT,QAAQ,CAAC;IAC1BO,QAAQ;IACRC;EACJ,CAAC,CAAC;EAEF,MAAK;IACDE,aAAa;IACbC,iBAAiB;IACjBC,YAAY;IACZC,IAAI;IACJC;EACJ,CAAC,GAACL,aAAa;EAEjB,oBACCL,OAAA;IAAA,GAAUM,aAAa,CAAC,CAAC;IAAAK,QAAA,gBACvBX,OAAA;MAAAW,QAAA,EACKH,YAAY,CAACI,GAAG,CAAEC,WAAW,iBAC3Bb,OAAA;QAAA,GAAQa,WAAW,CAACC,mBAAmB,CAAC,CAAC;QAAAH,QAAA,EACpCE,WAAW,CAACE,OAAO,CAACH,GAAG,CAAEI,OAAO,iBAC7BhB,OAAA;UAAA,GAAQgB,OAAO,CAACC,cAAc,CAAC,CAAC;UAAAN,QAAA,EAAGK,OAAO,CAACE,MAAM,CAAC,QAAQ;QAAC;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CACnE;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,eACRtB,OAAA;MAAA,GAAUO,iBAAiB,CAAC,CAAC;MAAAI,QAAA,EAC5BF,IAAI,CAACG,GAAG,CAAEW,GAAG,IAAG;QACdb,WAAW,CAACa,GAAG,CAAC;QAChB,oBACIvB,OAAA;UAAA,GAAQuB,GAAG,CAACC,WAAW,CAAC,CAAC;UAAAb,QAAA,EACxBY,GAAG,CAACE,KAAK,CAACb,GAAG,CAAEc,IAAI,IAAG;YACnB,oBAAQ1B,OAAA;cAAA,GAAQ0B,IAAI,CAACC,YAAY,CAAC,CAAC;cAAAhB,QAAA,EAAGe,IAAI,CAACR,MAAM,CAAC,MAAM;YAAC;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CAAC;UACnE,CAAC;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACD,CAAC;MACL,CAAC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEX,CAAC;AAAApB,EAAA,CA3CYD,UAAU;EAAA,QAKEL,QAAQ;AAAA;AAAAgC,EAAA,GALpB3B,UAAU;AA6CvB,eAAeA,UAAU;AAAA,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}